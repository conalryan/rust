#[macro_use]
extern crate diesel;
#[macro_use]
extern crate serde_derive;

use actix_web::{middleware, App, HttpServer};

// Diesel has a prelude which includes common types and functions which you
// almost always need while working with your database and the
// standard practice is to use the * import to bring all of the things exported
// in the prelude into scope as there is very little chance of a conflict.
use diesel::prelude::*;

// As we discussed previously r2d2 is a connection pooling library that Diesel
// provides an interface to because we turned that feature on in our manifest.
use diesel::r2d2::{self, ConnectionManager};

// The next thing we do for code readability is to create a type alias for our pool of database connections:
// Overusing type aliases can sometimes lead to more confusing code,
// but underusing them can also lead to noisy code.
type Pool = r2d2::Pool<ConnectionManager<SqliteConnection>>;

// The four modules we define are:
// • errors
//   – code for working with various failure scenarios
// • models
//   – code to define the Rust representation of our data model as represented by our database
// • routes
//   – code for defining the handlers that will make up the functions that get called by the framework in response to web requests
// • schema
//   – this is autogenerated by Diesel as we have mentioned before
mod errors;
mod models;
mod routes;
mod schema;

pub struct Blog {
    port: u16,
}

impl Blog {
    pub fn new(port: u16) -> Self {
        Blog { port }
    }

    pub fn run(&self, database_url: String) -> std::io::Result<()> {
        let manager = ConnectionManager::<SqliteConnection>::new(database_url);
        let pool = r2d2::Pool::builder()
            .build(manager)
            .expect("Failed to create pool.");

        println!("Starting http server: 127.0.0.1:{}", self.port);
        HttpServer::new(move || {
            App::new()
                // As the closure that gets passed to HttpServer::new is a factory
                // we have to clone our pool so that each worker will have access
                // to the same shared pool.
                //
                // Pool type is just an Arc around a struct that manages connections
                // so calling clone on the pool is the same as calling clone on an Arc,
                // exactly how we managed state before.
                .data(pool.clone())
                .wrap(middleware::Logger::default())
                // We are passing a function to configure routes::users::configure
                // which tells us that our routes module needs to publicly expose
                // a submodule called users, and that submodule needs to publicly
                // expose a function called configure.
                .configure(routes::users::configure)
                .configure(routes::posts::configure)
                .configure(routes::comments::configure)
        })
        .bind(("127.0.0.1", self.port))?
        .run()
    }
}
